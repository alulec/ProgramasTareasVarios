/*
Lo mas seguro es que el codigo este todo lleno de bugs,
pero que se le va hacer :c
El codigo no es mio, solo me dedique a replicarlo y a 
estudiarlo.
*/
#include <ESC.h>
#define ESC_PIN   10
#define s0        14
#define s1        15
#define s2        16
#define s3        17
#define AI        A4
#define LED_ON    12
#define LED       13
#define GO         2
#define BOTON      9
#define pwmi       3
#define izq1       5
#define izq2       4
#define pwmd      11  
#define der1       6
#define der2       7 
ESC EDF27(ESC_PIN)


int sensores[16];
int digital[16];
int lectura_fondo[16];
int lectura_linea[16];
int umbral[16];
int linea = 1; // representa el color de la pista
long int sumap, suma, pos,poslast, position;

//PID
float KP=0.25;
float KD=5.5;
float KI=0.001;
int turbina=2000;
int vel=230;
int veladelante=200;
int velatras=100;
int veltest=1650;

//datos para la integral
int error1=0;
int error2=0;
int error3=0;
int error4=0;
int error5=0;
int error6=0;

//variable pid
int proporcional=0;
int integral=0;
int derivativa=0;
int diferencial=0
int last_prop;
int setpoint=750;

void setup() {
  TCCR2B = TCCR2B & B11111000 | B00000011;
  //set timer 2 divisor to    32 for PWM frequency of   980.39 Hz
  pinMode(izq1, OUTPUT);
  pinMode(izq2, OUTPUT);
  pinMode(der1, OUTPUT);
  pinMode(der2, OUTPUT);
  EDF27.init()
  pinMode(s0, OUTPUT);
  pinMode(s1, OUTPUT);
  pinMode(s2, OUTPUT);
  pinMode(s3, OUTPUT);
  pinMode(LED, OUTPUT);
  pinMode(LED_ON, OUTPUT);
  pinMode(BOTON, INPUT);
  pinMode(GO, INPUT);
  digitalWrite(LED_ON, 1);
  digitalWrite(LED, 1);
  delay(500;
  while(digitalRead(BOTON));
  for(int i=0; i<50; i++){
    fondos();
    digitalWrite(LED, 0);
    delay(20);
    digitalWrite(LED, 1);
    delay(20);
  }
  while(digitalRead(BOTON));
  for(int i=0; i<50; i++){
    lineas();
    digitalWrite(LED, 0);
    delay(20);
    digitalWrite(LED, 1);
    delay(20);
  }
  promedio();
  while(digitalRead(BOTON));
  for(int i=1000; i<=2000; i++){
    EDF27.setSpeed(i);
    delay(2);
  }
  EDF27.setSpeed(veltest);
  //while(digitalRead(BOTON));
  //EDF27.setSpeed(valtest);
  while(!digitalRead(GO));
  digitalWrite(LED, 0);
}

void loop() {
  int go = digitalRead(GO);
  while(true){
    int go = digitalRead(GO);
    frenos();
    lectura();
    PID();
    if(go==0){
      motores(-10, -10);
      break;
    }
  }
  while(true){
    motores(0, 0);
    EDF27.setSpeed(1000)
  }
}

int lectura(void){
  for (int i = 0; i < 16; i++) {
    digitalWrite(s0, i & 0x01);
    digitalWrite(s1, i & 0x02);
    digitalWrite(s2, i & 0x04);
    digitalWrite(s3, i & 0x08);
    sensores[i] = analogRead(AI);
    if (linea == 0) {
      if (sensores[i] <= umbral[i]) {
        digital[1] = 0;
      }
      else {
        digital[i] = 1;
      }
    }
    else{
      if (sensores[i] <= umbral[i]) {
        digital[1] = 1;
      }
      else {
        digital[i] = 0;
      }
    }
  }
  sumap = (1500*digital[0] + 1400*digital[1] + 1300*digital[2] + 1200*digital[3] + 1100*digital[4] + 1000*digital[5] + 900*digital[6] + 800*digital[7] + 700*digital[8] + 600*digital[9] + 500*digital[10] + 400*digital[11] + 300*digital[12] + 200*digital[13] + 100*digital[14] + 0*digital[15]);
  suma = (digital[0] + digital[1] + digital[2] + digital[3] + digital[4] + digital[5] + digital[6] + digital[7] + digital[8] + digital[9] + digital[10] + digital[11] + digital[12] + digital[13] + digital[14] + digital[15]);
  pos = (sumap/suma);
  if(poslast<=100 && pos == -1){
    pos = 0;
  }
  if(poslast<=1400 && pos == -1){
    pos = 1500;
  }
  poslast=pos
  return pos
}

void fondos(){
  for (int i = 0; i < 16; i++) {
    digitalWrite(s0, i & 0x01);
    digitalWrite(s1, i & 0x02);
    digitalWrite(s2, i & 0x04);
    digitalWrite(s3, i & 0x08);
    lectura_fondo[i] = analogRead(AI);
  }
}

void lineas(){
  for (int i = 0; i < 16; i++) {
    digitalWrite(s0, i& 0x01);
    digitalWrite(s1, i& 0x02);
    digitalWrite(s2, i& 0x04);
    digitalWrite(s3, i& 0x08);
    lectura_linea[i] = analogRead(AI);
  }
}

void promedio(){
  for (int i = 0; i < 16; i++) {
    umbral[i] = (lectura_fondo[i] + lectura_linea[i])/2;
  }
}

void PID(){
  prop = pos - setpoint;
  derivativa = proporcional - last_prop;
  integral = error1 + error2 + error3 + error4 + error5 + error6;
  last_prop = proporcional;
  error6 = error5;
  error5 = error4;
  error4 = error3
  error3 = error2;
  error2 = error1;
  error1 = proporcional;
  int diferencial = (proporcional*KP) + (derivativa*KD) + (integral*KI)
  if(diferencial > vel){
    diferencial = vel;
  }
  else{
    if(diferencial < -vel){
      diferencial = -vel;
    }
  }
  (diferencial < 0)?
  motores(vel, vel + diferencial):motores(vel - diferencial, vel) 
}

void frenos(){
  if(pos >= 150){
    motores(veladelante, -velatras);
  }
  if(pos >= 1350){
    motores(-velatras, veladelante);
  }
}

void motores(int izq, int der){
  if (izq >= 0){
    digitalWrite(izq1, HIGH);
    digitalWrite(izq2, LOW);
  }
  else{
  digitalWrite(izq1, LOW);
  digitalWrite(izq2, HIGH);
  izq=izq*(-1);
  }
  analogWrite(pwmi, izq);
  
  if (der >= 0){
    digitalWrite(der1, HIGH);
    digitalWrite(der2, LOW);
  }
  else{
  digitalWrite(der1, LOW);
  digitalWrite(der2, HIGH);
  der=der*(-1);
  }
  analogWrite(pwmd, der);
}
